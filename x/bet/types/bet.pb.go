// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fanx/bet/bet.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status of the Bet.
type Bet_Status int32

const (
	// the invalid or unknown
	Bet_STATUS_UNSPECIFIED Bet_Status = 0
	// bet is placed
	Bet_STATUS_PLACED Bet_Status = 1
	// bet is canceled by Bettor
	Bet_STATUS_CANCELED Bet_Status = 2
	// bet is aborted
	Bet_STATUS_ABORTED Bet_Status = 3
	// bet is pending for getting placed
	Bet_STATUS_PENDING Bet_Status = 4
	// bet result is declared
	Bet_STATUS_RESULT_DECLARED Bet_Status = 5
	// the bet is settled
	Bet_STATUS_SETTLED Bet_Status = 6
)

var Bet_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PLACED",
	2: "STATUS_CANCELED",
	3: "STATUS_ABORTED",
	4: "STATUS_PENDING",
	5: "STATUS_RESULT_DECLARED",
	6: "STATUS_SETTLED",
}

var Bet_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED":     0,
	"STATUS_PLACED":          1,
	"STATUS_CANCELED":        2,
	"STATUS_ABORTED":         3,
	"STATUS_PENDING":         4,
	"STATUS_RESULT_DECLARED": 5,
	"STATUS_SETTLED":         6,
}

func (x Bet_Status) String() string {
	return proto.EnumName(Bet_Status_name, int32(x))
}

func (Bet_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a126e47071a7db8e, []int{0, 0}
}

// Result of the bet.
type Bet_Result int32

const (
	// the invalid or unknown
	Bet_RESULT_UNSPECIFIED Bet_Result = 0
	// bet result is pending
	Bet_RESULT_PENDING Bet_Result = 1
	// bet won by the bettor
	Bet_RESULT_WON Bet_Result = 2
	// bet lost by the bettor
	Bet_RESULT_LOST Bet_Result = 3
	// bet is refunded
	Bet_RESULT_REFUNDED Bet_Result = 4
)

var Bet_Result_name = map[int32]string{
	0: "RESULT_UNSPECIFIED",
	1: "RESULT_PENDING",
	2: "RESULT_WON",
	3: "RESULT_LOST",
	4: "RESULT_REFUNDED",
}

var Bet_Result_value = map[string]int32{
	"RESULT_UNSPECIFIED": 0,
	"RESULT_PENDING":     1,
	"RESULT_WON":         2,
	"RESULT_LOST":        3,
	"RESULT_REFUNDED":    4,
}

func (x Bet_Result) String() string {
	return proto.EnumName(Bet_Result_name, int32(x))
}

func (Bet_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a126e47071a7db8e, []int{0, 1}
}

// Bet is the transaction order placed by a bettor on a specific event and odd
type Bet struct {
	// uid is the universal unique identifier assigned to a bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// market_uid is the universal unique identifier of
	// the market on which the bet is placed.
	MarketUID string `protobuf:"bytes,2,opt,name=market_uid,proto3" json:"market_uid"`
	// odds_uid is the universal unique identifier,
	// of the odds on which the bet is placed.
	OddsUID string `protobuf:"bytes,3,opt,name=odds_uid,proto3" json:"odds_uid"`
	// odds_type is the type of odds that
	// user choose such as decimal, fractional, etc
	OddsType OddsType `protobuf:"varint,4,opt,name=odds_type,json=oddsType,proto3,enum=fanx.bet.OddsType" json:"odds_type,omitempty"`
	// odds_value is the odds on which the bet is placed.
	OddsValue string `protobuf:"bytes,5,opt,name=odds_value,json=oddsValue,proto3" json:"odds_value,omitempty"`
	// amount is the wager amount.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// bet_fee is the betting fee user needs to pay for placing a bet
	BetFee github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=bet_fee,json=betFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_fee"`
	// status is the status of the bet, such as `unspecified` or `settled`.
	Status Bet_Status `protobuf:"varint,8,opt,name=status,proto3,enum=fanx.bet.Bet_Status" json:"status,omitempty"`
	// result is the result of the bet, such as `won` or `lost`.
	Result Bet_Result `protobuf:"varint,9,opt,name=result,proto3,enum=fanx.bet.Bet_Result" json:"result,omitempty"`
	// creator is the bettor address.
	Creator string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
	// created_at is the bet placement timestamp.
	CreatedAt int64 `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// settlement_height is the block height at which the bet is settled.
	SettlementHeight int64 `protobuf:"varint,12,opt,name=settlement_height,json=settlementHeight,proto3" json:"settlement_height,omitempty"`
	// max_loss_multiplier is the multiplier coefficient of max loss.
	MaxLossMultiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=max_loss_multiplier,json=maxLossMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_loss_multiplier"`
	// bet_fulfillment is the fulfillment data.
	BetFulfillment []*BetFulfillment `protobuf:"bytes,14,rep,name=bet_fulfillment,json=betFulfillment,proto3" json:"bet_fulfillment,omitempty"`
}

func (m *Bet) Reset()         { *m = Bet{} }
func (m *Bet) String() string { return proto.CompactTextString(m) }
func (*Bet) ProtoMessage()    {}
func (*Bet) Descriptor() ([]byte, []int) {
	return fileDescriptor_a126e47071a7db8e, []int{0}
}
func (m *Bet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bet.Merge(m, src)
}
func (m *Bet) XXX_Size() int {
	return m.Size()
}
func (m *Bet) XXX_DiscardUnknown() {
	xxx_messageInfo_Bet.DiscardUnknown(m)
}

var xxx_messageInfo_Bet proto.InternalMessageInfo

func (m *Bet) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Bet) GetMarketUID() string {
	if m != nil {
		return m.MarketUID
	}
	return ""
}

func (m *Bet) GetOddsUID() string {
	if m != nil {
		return m.OddsUID
	}
	return ""
}

func (m *Bet) GetOddsType() OddsType {
	if m != nil {
		return m.OddsType
	}
	return OddsType_ODDS_TYPE_UNSPECIFIED
}

func (m *Bet) GetOddsValue() string {
	if m != nil {
		return m.OddsValue
	}
	return ""
}

func (m *Bet) GetStatus() Bet_Status {
	if m != nil {
		return m.Status
	}
	return Bet_STATUS_UNSPECIFIED
}

func (m *Bet) GetResult() Bet_Result {
	if m != nil {
		return m.Result
	}
	return Bet_RESULT_UNSPECIFIED
}

func (m *Bet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Bet) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Bet) GetSettlementHeight() int64 {
	if m != nil {
		return m.SettlementHeight
	}
	return 0
}

func (m *Bet) GetBetFulfillment() []*BetFulfillment {
	if m != nil {
		return m.BetFulfillment
	}
	return nil
}

// UID2ID is the type for mapping UIDs and Sequential IDs of bets.
type UID2ID struct {
	// uid is the universal unique identifier assigned to the bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// id is an autogenerated sequential id for a bet.
	ID uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id"`
}

func (m *UID2ID) Reset()         { *m = UID2ID{} }
func (m *UID2ID) String() string { return proto.CompactTextString(m) }
func (*UID2ID) ProtoMessage()    {}
func (*UID2ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a126e47071a7db8e, []int{1}
}
func (m *UID2ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UID2ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UID2ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UID2ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UID2ID.Merge(m, src)
}
func (m *UID2ID) XXX_Size() int {
	return m.Size()
}
func (m *UID2ID) XXX_DiscardUnknown() {
	xxx_messageInfo_UID2ID.DiscardUnknown(m)
}

var xxx_messageInfo_UID2ID proto.InternalMessageInfo

func (m *UID2ID) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *UID2ID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// PendingBet is the type for an unsettled bet
type PendingBet struct {
	// uid is the universal unique identifier for the bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// creator is the bettor address.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *PendingBet) Reset()         { *m = PendingBet{} }
func (m *PendingBet) String() string { return proto.CompactTextString(m) }
func (*PendingBet) ProtoMessage()    {}
func (*PendingBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_a126e47071a7db8e, []int{2}
}
func (m *PendingBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingBet.Merge(m, src)
}
func (m *PendingBet) XXX_Size() int {
	return m.Size()
}
func (m *PendingBet) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingBet.DiscardUnknown(m)
}

var xxx_messageInfo_PendingBet proto.InternalMessageInfo

func (m *PendingBet) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *PendingBet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// SettledBet is the type for a settled bet.
type SettledBet struct {
	// uid is the universal unique identifier for the bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// bettor_address is the bech32 address of the bettor account.
	BettorAddress string `protobuf:"bytes,2,opt,name=bettor_address,json=bettorAddress,proto3" json:"bettor_address,omitempty"`
}

func (m *SettledBet) Reset()         { *m = SettledBet{} }
func (m *SettledBet) String() string { return proto.CompactTextString(m) }
func (*SettledBet) ProtoMessage()    {}
func (*SettledBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_a126e47071a7db8e, []int{3}
}
func (m *SettledBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettledBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettledBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettledBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettledBet.Merge(m, src)
}
func (m *SettledBet) XXX_Size() int {
	return m.Size()
}
func (m *SettledBet) XXX_DiscardUnknown() {
	xxx_messageInfo_SettledBet.DiscardUnknown(m)
}

var xxx_messageInfo_SettledBet proto.InternalMessageInfo

func (m *SettledBet) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *SettledBet) GetBettorAddress() string {
	if m != nil {
		return m.BettorAddress
	}
	return ""
}

// BetFulfillment: A bet can be fulfilled by multiple users participating as a
// house Every participant is exposed to a share of risk or payout associated
// with the bet For the risk exposure on a bet, an estimated bet amount is also
// allocated to the participant This bet amount is the amount participant
// receive if the bettor loose the bet
type BetFulfillment struct {
	// participant_address is the bech32-encoded address of the participant
	// fulfilling bet.
	ParticipantAddress string `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty" yaml:"participant_address"`
	// participation_index is the index in initial participation queue index
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty" yaml:"participation_index"`
	// bet amount fulfilled by the participation
	BetAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=bet_amount,json=betAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_amount" yaml:"bet_amount"`
	// payout_profit is the fulfilled profit by the participation.
	PayoutProfit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=payout_profit,json=payoutProfit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"payout_profit" yaml:"payout_profit"`
}

func (m *BetFulfillment) Reset()         { *m = BetFulfillment{} }
func (m *BetFulfillment) String() string { return proto.CompactTextString(m) }
func (*BetFulfillment) ProtoMessage()    {}
func (*BetFulfillment) Descriptor() ([]byte, []int) {
	return fileDescriptor_a126e47071a7db8e, []int{4}
}
func (m *BetFulfillment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetFulfillment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetFulfillment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetFulfillment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetFulfillment.Merge(m, src)
}
func (m *BetFulfillment) XXX_Size() int {
	return m.Size()
}
func (m *BetFulfillment) XXX_DiscardUnknown() {
	xxx_messageInfo_BetFulfillment.DiscardUnknown(m)
}

var xxx_messageInfo_BetFulfillment proto.InternalMessageInfo

func (m *BetFulfillment) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *BetFulfillment) GetParticipationIndex() uint64 {
	if m != nil {
		return m.ParticipationIndex
	}
	return 0
}

func init() {
	proto.RegisterEnum("fanx.bet.Bet_Status", Bet_Status_name, Bet_Status_value)
	proto.RegisterEnum("fanx.bet.Bet_Result", Bet_Result_name, Bet_Result_value)
	proto.RegisterType((*Bet)(nil), "fanx.bet.Bet")
	proto.RegisterType((*UID2ID)(nil), "fanx.bet.UID2ID")
	proto.RegisterType((*PendingBet)(nil), "fanx.bet.PendingBet")
	proto.RegisterType((*SettledBet)(nil), "fanx.bet.SettledBet")
	proto.RegisterType((*BetFulfillment)(nil), "fanx.bet.BetFulfillment")
}

func init() { proto.RegisterFile("fanx/bet/bet.proto", fileDescriptor_a126e47071a7db8e) }

var fileDescriptor_a126e47071a7db8e = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xea, 0x46,
	0x14, 0xc6, 0x90, 0x0b, 0xe1, 0x24, 0x21, 0xce, 0x24, 0xba, 0xb5, 0xd2, 0x16, 0x90, 0xa5, 0x56,
	0x91, 0xda, 0x82, 0x94, 0xbb, 0x6b, 0x37, 0x05, 0x6c, 0x6e, 0x90, 0xb8, 0x80, 0x06, 0x68, 0xa5,
	0x2e, 0x6a, 0xd9, 0x78, 0x20, 0x6e, 0xfc, 0x27, 0x7b, 0x5c, 0x85, 0x75, 0x5f, 0xa0, 0x8f, 0xd0,
	0xc7, 0xb9, 0xcb, 0xbb, 0xac, 0xba, 0xb0, 0x2a, 0xb2, 0xeb, 0xa2, 0x8b, 0xfb, 0x04, 0xd5, 0x8c,
	0x27, 0x60, 0xa4, 0x2c, 0x92, 0x2e, 0x12, 0x66, 0xbe, 0xf3, 0x9d, 0xef, 0x9b, 0x73, 0x3c, 0x3e,
	0x06, 0xb4, 0x34, 0xfd, 0xfb, 0xb6, 0x45, 0x28, 0xfb, 0x6b, 0x85, 0x51, 0x40, 0x03, 0x74, 0xc8,
	0xb0, 0x96, 0x45, 0xe8, 0xe5, 0xc5, 0x2a, 0x58, 0x05, 0x1c, 0x6c, 0xb3, 0x55, 0x16, 0xbf, 0x54,
	0xb6, 0x39, 0x81, 0x6d, 0xc7, 0x06, 0x5d, 0x87, 0x24, 0x8b, 0xa8, 0xff, 0x56, 0xa0, 0xd4, 0x25,
	0x14, 0x35, 0xa1, 0x94, 0x38, 0xb6, 0x22, 0x35, 0xa5, 0xab, 0x6a, 0xb7, 0xb6, 0x49, 0x1b, 0xa5,
	0xf9, 0x40, 0xfb, 0x27, 0x6d, 0x30, 0x14, 0xb3, 0x7f, 0xe8, 0x3b, 0x00, 0xcf, 0x8c, 0xee, 0x08,
	0x35, 0x18, 0xb1, 0xc8, 0x89, 0x9f, 0x6e, 0xd2, 0x46, 0xf5, 0x1d, 0x47, 0x33, 0x7a, 0x8e, 0x82,
	0x73, 0x6b, 0xf4, 0x06, 0x0e, 0xb9, 0x33, 0x4b, 0x2d, 0xf1, 0xd4, 0x4f, 0x36, 0x69, 0xa3, 0x32,
	0xb6, 0xed, 0x38, 0x4b, 0xdc, 0x86, 0xf1, 0x76, 0x85, 0xda, 0x50, 0xdd, 0x1e, 0x57, 0x39, 0x68,
	0x4a, 0x57, 0xb5, 0x6b, 0xd4, 0x7a, 0xac, 0xb4, 0xc5, 0x72, 0x67, 0xeb, 0x90, 0x64, 0x09, 0x6c,
	0x85, 0x3e, 0x07, 0xe0, 0x09, 0xbf, 0x9a, 0x6e, 0x42, 0x94, 0x57, 0xcc, 0x07, 0x73, 0x89, 0x1f,
	0x18, 0x80, 0xfa, 0x50, 0x36, 0xbd, 0x20, 0xf1, 0xa9, 0x52, 0xe6, 0x47, 0x68, 0xbd, 0x4f, 0x1b,
	0x85, 0xbf, 0xd2, 0xc6, 0x97, 0x2b, 0x87, 0xde, 0x26, 0x56, 0x6b, 0x11, 0x78, 0xed, 0x45, 0x10,
	0x7b, 0x41, 0x2c, 0x7e, 0xbe, 0x89, 0xed, 0xbb, 0x36, 0x73, 0x8f, 0x5b, 0x03, 0x9f, 0x62, 0x91,
	0x8d, 0xde, 0x42, 0xc5, 0x22, 0xd4, 0x58, 0x12, 0xa2, 0x54, 0xfe, 0x9f, 0x90, 0x45, 0x68, 0x9f,
	0x10, 0xf4, 0x35, 0x94, 0x63, 0x6a, 0xd2, 0x24, 0x56, 0x0e, 0x79, 0x75, 0x17, 0xbb, 0xea, 0xba,
	0x84, 0xb6, 0xa6, 0x3c, 0x86, 0x05, 0x87, 0xb1, 0x23, 0x12, 0x27, 0x2e, 0x55, 0xaa, 0x4f, 0xb1,
	0x31, 0x8f, 0x61, 0xc1, 0x41, 0x0a, 0x54, 0x16, 0x11, 0x31, 0x69, 0x10, 0x29, 0xc0, 0x1b, 0xf1,
	0xb8, 0x65, 0x5d, 0xe2, 0x4b, 0x62, 0x1b, 0x26, 0x55, 0x8e, 0x9a, 0xd2, 0x55, 0x09, 0x57, 0x05,
	0xd2, 0xa1, 0xe8, 0x2b, 0x38, 0x8b, 0x09, 0xa5, 0x2e, 0xf1, 0x88, 0x4f, 0x8d, 0x5b, 0xe2, 0xac,
	0x6e, 0xa9, 0x72, 0xcc, 0x59, 0xf2, 0x2e, 0x70, 0xc3, 0x71, 0xf4, 0x33, 0x9c, 0x7b, 0xe6, 0xbd,
	0xe1, 0x06, 0x71, 0x6c, 0x78, 0x89, 0x4b, 0x9d, 0xd0, 0x75, 0x48, 0xa4, 0x9c, 0xbc, 0xb8, 0x2d,
	0x1a, 0x59, 0xe0, 0x33, 0xcf, 0xbc, 0x1f, 0x06, 0x71, 0xfc, 0x6e, 0x2b, 0x84, 0x3a, 0x70, 0xca,
	0x5b, 0x9d, 0xb8, 0x4b, 0xc7, 0x75, 0x99, 0xb1, 0x52, 0x6b, 0x96, 0xae, 0x8e, 0xae, 0x95, 0xbd,
	0xe2, 0xfb, 0xbb, 0x38, 0xae, 0x59, 0x7b, 0x7b, 0xf5, 0x0f, 0x09, 0xca, 0x59, 0x27, 0xd1, 0x6b,
	0x40, 0xd3, 0x59, 0x67, 0x36, 0x9f, 0x1a, 0xf3, 0xd1, 0x74, 0xa2, 0xf7, 0x06, 0xfd, 0x81, 0xae,
	0xc9, 0x05, 0x74, 0x06, 0x27, 0x02, 0x9f, 0x0c, 0x3b, 0x3d, 0x5d, 0x93, 0x25, 0x74, 0x0e, 0xa7,
	0x02, 0xea, 0x75, 0x46, 0x3d, 0x7d, 0xa8, 0x6b, 0x72, 0x11, 0x21, 0xa8, 0x09, 0xb0, 0xd3, 0x1d,
	0xe3, 0x99, 0xae, 0xc9, 0xa5, 0x1c, 0x36, 0xd1, 0x47, 0xda, 0x60, 0xf4, 0x56, 0x3e, 0x40, 0x97,
	0xf0, 0x5a, 0x60, 0x58, 0x9f, 0xce, 0x87, 0x33, 0x43, 0xd3, 0x7b, 0xc3, 0x0e, 0xd6, 0x35, 0xf9,
	0x55, 0x8e, 0x3f, 0xd5, 0x67, 0x33, 0xa6, 0x5b, 0x56, 0x7f, 0x81, 0x72, 0xf6, 0xf4, 0xd8, 0x09,
	0x45, 0xca, 0xfe, 0x09, 0x11, 0xd4, 0x04, 0xfe, 0xe8, 0x22, 0xa1, 0x1a, 0x80, 0xc0, 0x7e, 0x1c,
	0x8f, 0xe4, 0x22, 0x3a, 0x85, 0x23, 0xb1, 0x1f, 0x8e, 0xa7, 0x33, 0xb9, 0xc4, 0x6a, 0x10, 0x00,
	0xd6, 0xfb, 0xf3, 0x91, 0xa6, 0x6b, 0xf2, 0x81, 0x7a, 0x03, 0xe5, 0xf9, 0x40, 0xbb, 0x1e, 0x68,
	0xcf, 0x78, 0xe5, 0x3f, 0x83, 0xa2, 0x78, 0xd5, 0x0f, 0xba, 0xc7, 0x9b, 0xb4, 0x51, 0xe4, 0xf1,
	0xa2, 0x63, 0xe3, 0xa2, 0x63, 0xab, 0x37, 0x00, 0x13, 0xe2, 0xdb, 0x8e, 0xbf, 0x7a, 0xde, 0x00,
	0xc9, 0xdd, 0xc8, 0xe2, 0xde, 0x8d, 0x54, 0xe7, 0x00, 0x53, 0x7e, 0xb3, 0xec, 0xe7, 0x29, 0x7d,
	0x01, 0xec, 0x21, 0xd3, 0x20, 0x32, 0x4c, 0xdb, 0x8e, 0x48, 0x1c, 0x0b, 0xc1, 0x93, 0x0c, 0xed,
	0x64, 0xa0, 0xfa, 0x5b, 0x09, 0x6a, 0xfb, 0x97, 0x03, 0x8d, 0xe1, 0x3c, 0x34, 0x23, 0xea, 0x2c,
	0x9c, 0xd0, 0xf4, 0xe9, 0x36, 0x3d, 0xf3, 0xaa, 0x7f, 0x4c, 0x1b, 0x97, 0x6b, 0xd3, 0x73, 0xbf,
	0x55, 0x9f, 0x20, 0xa9, 0x18, 0xe5, 0x50, 0xe1, 0xb1, 0x27, 0x48, 0x9d, 0xc0, 0x37, 0x1c, 0xdf,
	0x26, 0xf7, 0xa2, 0x67, 0x4f, 0x09, 0xee, 0x48, 0x79, 0x41, 0x86, 0x0e, 0x18, 0x88, 0x2c, 0x00,
	0x76, 0xe3, 0xc5, 0xa0, 0xca, 0x66, 0x65, 0xef, 0x65, 0xf3, 0xe5, 0x63, 0xda, 0x38, 0xcb, 0x5c,
	0x77, 0x4a, 0x2a, 0xae, 0x5a, 0x84, 0x76, 0xb2, 0x01, 0x76, 0x07, 0x27, 0xa1, 0xb9, 0x0e, 0x12,
	0x6a, 0x84, 0x51, 0xb0, 0x74, 0x28, 0x1f, 0xae, 0xd5, 0x6e, 0xff, 0xc5, 0x36, 0x17, 0x8f, 0xc5,
	0xe5, 0xc4, 0x54, 0x7c, 0x9c, 0xed, 0x27, 0x7c, 0xdb, 0xfd, 0xfe, 0xfd, 0xa6, 0x2e, 0x7d, 0xd8,
	0xd4, 0xa5, 0xbf, 0x37, 0x75, 0xe9, 0xf7, 0x87, 0x7a, 0xe1, 0xc3, 0x43, 0xbd, 0xf0, 0xe7, 0x43,
	0xbd, 0xf0, 0x53, 0xde, 0x27, 0x74, 0xcd, 0x35, 0x89, 0x96, 0x49, 0xb4, 0x6e, 0xf3, 0x6f, 0x55,
	0xf6, 0xb5, 0xe2, 0x5e, 0x56, 0x99, 0x7f, 0xaa, 0xde, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xbd,
	0x62, 0x74, 0xa3, 0xfa, 0x06, 0x00, 0x00,
}

func (m *Bet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BetFulfillment) > 0 {
		for iNdEx := len(m.BetFulfillment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BetFulfillment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	{
		size := m.MaxLossMultiplier.Size()
		i -= size
		if _, err := m.MaxLossMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.SettlementHeight != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.SettlementHeight))
		i--
		dAtA[i] = 0x60
	}
	if m.CreatedAt != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBet(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.Result != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.BetFee.Size()
		i -= size
		if _, err := m.BetFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.OddsValue) > 0 {
		i -= len(m.OddsValue)
		copy(dAtA[i:], m.OddsValue)
		i = encodeVarintBet(dAtA, i, uint64(len(m.OddsValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OddsType != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.OddsType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OddsUID) > 0 {
		i -= len(m.OddsUID)
		copy(dAtA[i:], m.OddsUID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.OddsUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketUID) > 0 {
		i -= len(m.MarketUID)
		copy(dAtA[i:], m.MarketUID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.MarketUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UID2ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UID2ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UID2ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBet(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettledBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettledBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettledBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BettorAddress) > 0 {
		i -= len(m.BettorAddress)
		copy(dAtA[i:], m.BettorAddress)
		i = encodeVarintBet(dAtA, i, uint64(len(m.BettorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BetFulfillment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetFulfillment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BetFulfillment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PayoutProfit.Size()
		i -= size
		if _, err := m.PayoutProfit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BetAmount.Size()
		i -= size
		if _, err := m.BetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ParticipationIndex != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintBet(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBet(dAtA []byte, offset int, v uint64) int {
	offset -= sovBet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.MarketUID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.OddsUID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.OddsType != 0 {
		n += 1 + sovBet(uint64(m.OddsType))
	}
	l = len(m.OddsValue)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBet(uint64(l))
	l = m.BetFee.Size()
	n += 1 + l + sovBet(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBet(uint64(m.Status))
	}
	if m.Result != 0 {
		n += 1 + sovBet(uint64(m.Result))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBet(uint64(m.CreatedAt))
	}
	if m.SettlementHeight != 0 {
		n += 1 + sovBet(uint64(m.SettlementHeight))
	}
	l = m.MaxLossMultiplier.Size()
	n += 1 + l + sovBet(uint64(l))
	if len(m.BetFulfillment) > 0 {
		for _, e := range m.BetFulfillment {
			l = e.Size()
			n += 1 + l + sovBet(uint64(l))
		}
	}
	return n
}

func (m *UID2ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovBet(uint64(m.ID))
	}
	return n
}

func (m *PendingBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	return n
}

func (m *SettledBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.BettorAddress)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	return n
}

func (m *BetFulfillment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovBet(uint64(m.ParticipationIndex))
	}
	l = m.BetAmount.Size()
	n += 1 + l + sovBet(uint64(l))
	l = m.PayoutProfit.Size()
	n += 1 + l + sovBet(uint64(l))
	return n
}

func sovBet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBet(x uint64) (n int) {
	return sovBet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsType", wireType)
			}
			m.OddsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OddsType |= OddsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Bet_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= Bet_Result(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementHeight", wireType)
			}
			m.SettlementHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLossMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLossMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFulfillment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BetFulfillment = append(m.BetFulfillment, &BetFulfillment{})
			if err := m.BetFulfillment[len(m.BetFulfillment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UID2ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UID2ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UID2ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettledBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettledBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettledBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BettorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BettorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetFulfillment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetFulfillment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetFulfillment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutProfit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayoutProfit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBet = fmt.Errorf("proto: unexpected end of group")
)
